@page "/appointment-success"
@page "/appointment-success/{Id:int}"
@using webStudioBlazor.BL

@inject AppointmentNotifier _notification
@inject IConfiguration _сonfig
@inject SeedService _seedService
@inject NavigationManager _navigationManager
@rendermode InteractiveServer

<h3 style="padding-top: 5%;"></h3>
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">
            <div class="card shadow rounded text-center p-4">
                <div class="mb-3">
                    <span class="badge rounded-pill px-3 py-2"
                          style="background-color:#f8b7d8; color:white;">
                        Успішно
                    </span>
                </div>
                <h1 class="display-5 mb-3">Дякуємо! Запис створено</h1>
                <p class="lead">@clientUser.ClientName - ми зв’яжемося з вами для підтвердження деталей найближчим часом.</p>              
                <div class="d-grid gap-2 d-md-flex justify-content-md-center mt-4">
                    <a href="/" class="btn btn-outline-primary rounded-pill w-100 w-md-auto">
                        На головну
                    </a>
                    <a href="/appointment-user" class="btn btn-primary rounded-pill text-white w-100 w-md-auto">
                        Новий запис
                    </a>                   
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public int Id { get; set; }

    private Appointment clientUser = new();
    private List<Master> masters = new();
    private List<Category> categories = new();
    private List<PageTherapy> pageTherapies = new();
    private string? DeepLink;      
    private bool _didRun;
    private bool firstRender;

    protected override async Task OnInitializedAsync()    
    {       
        clientUser = await _seedService.GetClientAppointmentId(Id);
        masters = await _seedService.GetAllMasterListAsync();
        categories = await _seedService.GetAllCategoryListAsync();
        pageTherapies = await _seedService.GetAllPageTherapyListAsync();               
    }
       
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || _didRun) return; 
        _didRun = true;
       
         await EnsureLinkAndNotifyOnceAsync();
    }

    private async Task EnsureLinkAndNotifyOnceAsync()
    {
        string botUsername = _сonfig["Telegram:BotUsername"];
        string baseLink = _сonfig["Telegram:BaseLink"];
        if (!string.IsNullOrWhiteSpace(botUsername) && !string.IsNullOrWhiteSpace(baseLink))
        {
            DeepLink = $"{baseLink.TrimEnd('/')}/{botUsername}?start={Id}";
           
            await SendMessageAsync();
        }
    }

    private async Task SendMessageAsync()
    
    {
        if (clientUser.Id == 0 || !_didRun)
            return;

        categories = await _seedService.GetAllCategoryListAsync();
        var category = categories.FirstOrDefault(c => c.Id == clientUser.CategoryId);
        var categoryName = category?.NameCategory;
        var serviceName = clientUser.ClientName;

        await _notification.NotifyNewAsync(
            clientName: clientUser.ClientName,
            phone: clientUser.ClientPhone,
            serviceName: categoryName,
            date: clientUser.AppointmentDate,
            time: clientUser.SetHour
        );
    }
}
