@page "/appointment-user"
@page "/appointment-user/{Id:int}"
@using System.ComponentModel.DataAnnotations


@inject NavigationManager _navigationManager
@rendermode InteractiveServer
@inject SeedService _seedService


<h3 style="padding-top: 5%;"></h3>
<div class="container py-4">
    <div class="section-title mb-5 text-center">
        <div class="sub-style">
            <h4 class="sub-title px-3 mb-0">Запис онлайн</h4>
        </div>
        <h1 class="display-5 mb-3">Залиште заявку на прийом</h1>
        <p>Заповніть форму, і ми з вами зв'яжемося для підтвердження запису.</p>
    </div>

    <div class="row justify-content-center">
        <div class="col-lg-6">
            <div class="card shadow rounded">
                <div class="card-body p-4">
                    <EditForm Model="@clientUser" method="post" OnSubmit="HandleValidSubmit"
                              FormName="AppointmentClientRead"
                              class="card shadow-sm border rounded-3 p-4 bg-white"
                              style="width: 100%; max-width: 600px;">

                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger small" />

                        <div class="mb-3">
                            <label for="Input_Name" class="form-label fw-semibold small">
                                Ім’я та прізвище <span class="text-danger">*</span><strong style="color:red">@ErrorMessageFullName</strong>
                            </label>
                            <InputText @bind-Value="clientUser.ClientName" id="InputCategory_Name"
                                       class="form-control form-control-sm"
                                       placeholder="Введіть назву..." />
                            <ValidationMessage For="@(() => clientUser.ClientName)" class="text-danger small" />
                        </div>
                        <div class="mb-3">
                            <label for="Input_Phone" class="form-label fw-semibold small">
                                Телефон <span class="text-danger">*</span><strong style="color:red">@ErrorMessagePhone</strong>
                            </label>
                            <InputText @bind-Value="clientUser.ClientPhone" id="InputCategory_Name"
                                       class="form-control form-control-sm"
                                       placeholder="+380..." />
                            <ValidationMessage For="@(() => clientUser.ClientPhone)" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Послуга</label><span class="text-danger">*</span><strong style="color:red">@ErrorMessageCategory</strong>
                            <InputSelect class="form-select" @bind-Value="clientUser.CategoryId" TValue="int">
                                <option value="">Оберіть послугу</option>
                                @foreach (var cat in categories)
                                {
                                    <option value="@cat.Id">@cat.NameCategory</option>
                                }
                            </InputSelect>
                        </div>

                        <!-- Послуга -->
                        <div class="mb-3">
                            <label class="form-label">Категорія</label><span class="text-danger">*</span><strong style="color:red">@ErrorMessageService</strong>
                            <InputSelect class="form-select" @bind-Value="clientUser.TherapyId" TValue="int">
                                <option value="">Оберіть послугу</option>
                                @foreach (var srv in therapyCards.Where(c =>c.CategoryId == clientUser.CategoryId).ToList())
                                {
                                    <option value="@srv.Id">@srv.TitleCard</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => clientUser.TherapyId)" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Дата</label><span class="text-danger">*</span><strong style="color:red">@ErrorMessageSelectedDate</strong>
                           @*  <InputDate class="form-control" @bind-Value="clientUser.AppointmentDate" /> *@

                            <InputDate TValue="DateOnly"
                                       Value="clientUser.AppointmentDate"
                                       ValueChanged="@( (DateOnly v) => OnDateChanged(v) )"
                                       ValueExpression="() => clientUser.AppointmentDate"
                                       class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Час</label><span class="text-danger">*</span><strong style="color:red">@ErrorMessageSelectedTime</strong>
                            <InputSelect @bind-Value="booking.SelectedTime" class="form-select" TValue="MassageTime?">
                                <option value="">Оберіть час</option>
                                @if (availableSlots?.Count > 0)
                                {
                                    foreach (var time in availableSlots)
                                    {
                                        <option value="@time">@GetDisplayName(time)</option>
                                    }
                                }
                                else
                                {
                                    <option disabled>Немає вільних слотів на цю дату</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="d-flex justify-content-center gap-2 mt-3">
                            <button type="submit" class="btn rounded-pill px-4" style="background-color: #f8b7d8; color: white; border: none;">
                                Записатися
                            </button>
                        </div>

                    </EditForm>
                </div>
            </div>
        </div>
    </div>


</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Appointment clientUser = new();
    private MassageTherapyBooking booking = new();
    private AppointmentService appointmentService= new();

    private static readonly List<MassageTime> AllSlots = Enum.GetValues<MassageTime>().ToList();
    private List<MassageTime> availableSlots = new();
    private List<Appointment> clientList = new();
    private List<Master> masters = new();
    private List<Category> categories = new();
    private List<TherapyCard> therapyCards = new();

    private string ErrorMessageSelectedTime = string.Empty;
    private string ErrorMessageSelectedDate = string.Empty;
    private string ErrorMessageFullName = string.Empty;
    private string ErrorMessagePhone = string.Empty;
    private string ErrorMessageService = string.Empty;
    private string ErrorMessageCategory = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        masters = await _seedService.GetAllMasterListAsync();
        categories = await _seedService.GetAllCategoryListAsync();
        therapyCards = await _seedService.GetAllTherapyCardListAsync();
        clientList = await _seedService.GetAllClientListAsync();

        if (Id > 0)
        {
            clientUser = await _seedService.GetClientAppointmentId(Id);
            booking.SelectedTime = ConvertToMassageTime(clientUser.SetHour);
            UpdateAvailableSlots(clientUser.AppointmentDate, excludeCurrent: true);
        }
        else
        {
            clientUser = new();
            clientUser.AppointmentDate = DateOnly.FromDateTime(DateTime.Today);                       
            UpdateAvailableSlots(clientUser.AppointmentDate, excludeCurrent: false);
        }
    }          

    private void HandleValidSubmit()
    {
        if (booking.SelectedTime.HasValue)
        {
            var selectedTimeOnly = MassageTimeToTimeOnly(booking.SelectedTime.Value);
            clientUser.SetHour = selectedTimeOnly;
            clientUser.MasterId = categories.FirstOrDefault(c => c.Id == clientUser.CategoryId)?.MasterId ?? 0;
            clientUser.Price = therapyCards.FirstOrDefault(t => t.Id == clientUser.CategoryId)?.Price ?? 0;
            var idClient = _seedService.SaveClient(clientUser);
            appointmentService.AppointmentId = idClient;
            appointmentService.CategoryId = clientUser.CategoryId;
            appointmentService.TherapyId = clientUser.TherapyId;

            _seedService.SaveClientService(appointmentService);
            _navigationManager.NavigateTo($"/appointment-confirm/{idClient}");
        }
        else
        {            
            ErrorMessageSelectedTime = "Оберіть час";
        }      
    }

    #region Booking state
    private void OnDateChanged(DateOnly newDate)
    {
        clientUser.AppointmentDate = newDate;
        var isEdit = clientUser.Id > 0;
        UpdateAvailableSlots(newDate, excludeCurrent: isEdit);
    }

    public class MassageTherapyBooking
    {
        [Required(ErrorMessage = "Оберіть час")]       
        public MassageTime? SelectedTime { get; set; }
    }

    private void UpdateAvailableSlots(DateOnly date, bool excludeCurrent = false)
    {
        var allSlots = Enum.GetValues<MassageTime>();
        var booked = clientList.Where(c => c.AppointmentDate == date).Select(c => ConvertToMassageTime(c.SetHour)).Where(x => x.HasValue).Select(x => x.Value).ToHashSet();       
        availableSlots = booked.Count == 0 ? new List<MassageTime>(allSlots) : allSlots.Where(s => !booked.Contains(s)).ToList();
        if (excludeCurrent && booking.SelectedTime is { } sel && !availableSlots.Contains(sel)) availableSlots.Insert(0, sel);
    }

    private TimeOnly MassageTimeToTimeOnly(MassageTime time)
    {
        return time switch
        {
            MassageTime.Morning_10_00 => new TimeOnly(10, 0),
            MassageTime.Morning_11_30 => new TimeOnly(11, 30),
            MassageTime.Noon_13_00 => new TimeOnly(13, 0),
            MassageTime.Afternoon_14_30 => new TimeOnly(14, 30),
            MassageTime.Evening_16_00 => new TimeOnly(16, 0),
            MassageTime.Evening_17_30 => new TimeOnly(17, 30),
            MassageTime.Evening_18_30 => new TimeOnly(18, 30),
            _ => throw new ArgumentOutOfRangeException(nameof(time), time, null)
        };
    }

    private MassageTime? ConvertToMassageTime(TimeOnly time)
    {
        return time switch
        {
            { Hour: 10, Minute: 0 } => MassageTime.Morning_10_00,
            { Hour: 11, Minute: 30 } => MassageTime.Morning_11_30,
            { Hour: 13, Minute: 0 } => MassageTime.Noon_13_00,
            { Hour: 14, Minute: 30 } => MassageTime.Afternoon_14_30,
            { Hour: 16, Minute: 0 } => MassageTime.Evening_16_00,
            { Hour: 17, Minute: 30 } => MassageTime.Evening_17_30,
            { Hour: 18, Minute: 30 } => MassageTime.Evening_18_30,
            _ => null 
        };
    }

    public enum MassageTime
    {
        [Display(Name = "10:00")] Morning_10_00,
        [Display(Name = "11:30")] Morning_11_30,
        [Display(Name = "13:00")] Noon_13_00,
        [Display(Name = "14:30")] Afternoon_14_30,
        [Display(Name = "16:00")] Evening_16_00,
        [Display(Name = "17:30")] Evening_17_30,
        [Display(Name = "18:30")] Evening_18_30
    }

    private string GetDisplayName(MassageTime time)
    {
        var member = time.GetType().GetMember(time.ToString()).First();
        var display = member.GetCustomAttributes(typeof(DisplayAttribute), false).Cast<DisplayAttribute>().FirstOrDefault();
        return display?.Name ?? time.ToString();
    }
    #endregion
}
