@page "/analytics"

@using System.Globalization
@inject AnalyticsService analytics
@inject IJSRuntime _js
@layout AdminLayout
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer

<div class="card filter-card shadow-sm border-0">
    <div class="card-header bg-body d-flex align-items-center justify-content-between">
        <div class="d-flex align-items-center gap-2">
            <i class="bi bi-graph-up"></i>
            <span class="fw-semibold">Аналітика послуг</span>
        </div>
        <small class="text-body-secondary">Оберіть період і натисніть «Показати»</small>
    </div>

    <div class="card-body">      
        <div class="row g-3 align-items-end">
            <div class="col-12 col-sm-6 col-md-3">
                <label class="form-label" for="fromDate">Від</label>
                <div class="input-group input-group-sm input-group-calendar">
                    <span class="input-group-text"><i class="bi bi-calendar3"></i></span>
                    <InputDate id="fromDate" @bind-Value="from" TValue="DateOnly" class="form-control form-control-sm" />
                </div>
                <div class="form-text">Початок періоду (включно)</div>
            </div>

            <div class="col-12 col-sm-6 col-md-3">
                <label class="form-label" for="toDate">До</label>
                <div class="input-group input-group-sm input-group-calendar">
                    <span class="input-group-text"><i class="bi bi-calendar3"></i></span>
                    <InputDate id="toDate" @bind-Value="to" TValue="DateOnly" class="form-control form-control-sm" />
                </div>
                <div class="form-text">Кінець періоду (включно)</div>
            </div>

            <div class="col-12 col-md-6">
                <div class="d-grid d-md-flex justify-content-md-end gap-2">
                    <button class="btn btn-primary btn-sm" @onclick="RefreshAsync">
                        <i class="bi bi-play-circle me-1"></i> Показати
                    </button>
                    <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="ResetFilter">
                        <i class="bi bi-arrow-counterclockwise me-1"></i> Скинути
                    </button>
                </div>
            </div>
        </div>
        <div class="row row-cols-1 row-cols-md-4 g-3 mt-3 kpis justify-content-center text-center">

            <!-- Загальний дохід -->
            <div class="col">
                <div class="card border-0 shadow-sm kpi kpi-total h-100">
                    <div class="card-body py-3">
                        <div class="d-flex justify-content-center align-items-center gap-2 mb-1">
                            <i class="bi bi-cash-stack text-success fs-5"></i>
                            <span class="text-body-secondary small text-uppercase">Загальний дохід</span>
                        </div>
                        <div class="fs-4 fw-semibold">@Money(totalRevenue)</div>
                        <div class="small text-body-secondary">Замовлень: @totalCount</div>
                    </div>
                </div>
            </div>

            <!-- Косметологія -->
            <div class="col">
                <div class="card border-0 shadow-sm kpi kpi-cosmo h-100">
                    <div class="card-body py-3">
                        <div class="d-flex justify-content-center align-items-center gap-2 mb-1">
                            <i class="bi bi-heart text-pink fs-5"></i>
                            <span class="text-body-secondary small text-uppercase">Косметологія</span>
                        </div>
                        <div class="fs-5 fw-semibold">@Money(cosmoRevenue)</div>
                        <div class="small text-body-secondary">Візитів: @cosmoCount</div>
                    </div>
                </div>
            </div>

            <!-- Масаж -->
            <div class="col">
                <div class="card border-0 shadow-sm kpi kpi-massage h-100">
                    <div class="card-body py-3">
                        <div class="d-flex justify-content-center align-items-center gap-2 mb-1">
                            <i class="bi bi-hand-index-thumb text-primary fs-5"></i>
                            <span class="text-body-secondary small text-uppercase">Масаж</span>
                        </div>
                        <div class="fs-5 fw-semibold">@Money(massageRevenue)</div>
                        <div class="small text-body-secondary">Візитів: @massageCount</div>
                    </div>
                </div>
            </div>

            <!-- Продажі -->
            <div class="col">
                <div class="card border-0 shadow-sm kpi kpi-sales h-100">
                    <div class="card-body py-3">
                        <div class="d-flex justify-content-center align-items-center gap-2 mb-1">
                            <i class="bi bi-bag-check text-warning fs-5"></i>
                            <span class="text-body-secondary small text-uppercase">Продажі</span>
                        </div>
                        <div class="fs-5 fw-semibold">@Money(salesRevenue)</div>
                        <div class="small text-body-secondary">Замовлень: @ordersCount</div>
                    </div>
                </div>
            </div>

        </div>

        <div class="chart-wrap position-relative mt-3">
            <div id="chartdiv" class="rounded-3 border" style="width:100%; min-height: 480px;"></div>
        </div>               
    </div>
</div>

@code {
    private DateOnly from = DateOnly.FromDateTime(DateTime.Today.AddMonths(-1));
    private DateOnly to = DateOnly.FromDateTime(DateTime.Today);    
    private decimal totalRevenue, cosmoRevenue, massageRevenue, salesRevenue;
    private int totalCount, cosmoCount, massageCount, ordersCount;
    private bool isLoading;
    private static readonly CultureInfo ua = CultureInfo.GetCultureInfo("uk-UA");
    private string Money(decimal v) => $"{v.ToString("N0", ua)} грн";
    private List<object>? _mapped;
    private IJSObjectReference? _mod;
    private bool _canInvokeJs;

    protected override async Task OnInitializedAsync()
    {       
        await RefreshAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _canInvokeJs = true;                        
            _mod = await _js.InvokeAsync<IJSObjectReference>("import", "/js/analytics.js");
            await LoadChartAsync(); 
        }
    }

    private async Task RefreshAsync()
    {
        await RefreshDataAsync();     
        await LoadChartAsync();       
    }

    private async Task RefreshDataAsync()
    {
        DateTime? fromArg = (from == default) ? null : from.ToDateTime(TimeOnly.MinValue);
        DateTime? toArg = (to == default) ? null : to.ToDateTime(TimeOnly.MaxValue); 

        var data = await analytics.GetAsync(fromArg, toArg);

        // --- Підрахунок доходів ---
        cosmoRevenue = data.Sum(p => p.CosmetologyRevenue);
        massageRevenue = data.Sum(p => p.MassageRevenue);
        salesRevenue = data.Sum(p => p.SalesRevenue);   
        totalRevenue = cosmoRevenue + massageRevenue + salesRevenue;

        // --- Підрахунок кількості ---
        cosmoCount = data.Sum(p => p.CosmetologyCount);
        massageCount = data.Sum(p => p.MassageCount);
        ordersCount = data.Sum(p => p.OrdersCount);      
        totalCount = cosmoCount + massageCount + ordersCount;

        // --- Підготовка даних для графіка ---
        _mapped = data.Select(p => new
        {
            date = p.Date.ToString("yyyy-MM-dd"),
            cosmetologyRevenue = p.CosmetologyRevenue,
            massageRevenue = p.MassageRevenue,
            salesRevenue = p.SalesRevenue,             
            totalRevenue = p.TotalRevenue
        }).ToList<object>();
    }



    private async Task LoadChartAsync()
    {
        if (!_canInvokeJs || _mapped is null) return;

        _mod ??= await _js.InvokeAsync<IJSObjectReference>("import", "/js/analytics.js");

        await _js.InvokeVoidAsync("GeneralPieChartExpenditure", _mapped);
    }
       
    private async Task ResetFilter()
    {
        from = DateOnly.FromDateTime(DateTime.Today.AddMonths(-1));
        to = DateOnly.FromDateTime(DateTime.Today);
        await RefreshAsync();
    }
}
